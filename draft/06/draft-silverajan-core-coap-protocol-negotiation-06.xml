<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml2rfc.tools.ietf.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced. 
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7228 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7228.xml">
<!ENTITY RFC7252 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7252.xml">
<!ENTITY I-D.ietf-core-resource-directory SYSTEM
'http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-core-resource-directory'>
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml2rfc.tools.ietf.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->

<rfc category="info" docName="draft-silverajan-core-coap-protocol-negotiation-06" ipr="trust200902">
 <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

<!-- ***** FRONT MATTER ***** -->

<front>
<!-- The abbreviated title is used in the page header - it is only necessary if the 
full title is longer than 39 characters -->

 <title abbrev="CoAP Protocol Negotiation">CoAP Protocol Negotiation</title>

<!-- add 'role="editor"' below for the editors if appropriate -->

 <author initials='B.' surname="Silverajan" fullname='Bilhanan Silverajan'>
  <organization abbrev="TUT">Tampere University of Technology</organization>
  <address>
   <postal>
    <street>Korkeakoulunkatu 10</street>
    <code>FI-33720 Tampere</code>
    <country>Finland</country>  
   </postal>
   <email>bilhanan.silverajan@tut.fi</email>
  </address>
 </author>

 <author initials='M.' surname="Ocak" fullname='Mert Ocak'>
  <organization abbrev="Ericsson">Ericsson</organization>
  <address>
  <postal>
   <street>Hirsalantie 11</street>
   <code>02420 Jorvas</code>
   <country>Finland</country>
  </postal>
  <email>mert.ocak@ericsson.com</email>
  </address>
 </author>

 <date year="2017" />

 <area>Internet</area>

 <workgroup>CoRE Working Group</workgroup>

 <keyword>CoAP</keyword>
 <keyword>Protocol Negotiation</keyword>

 <!-- Keywords will be incorporated into HTML output files in a meta tag but
 they have no effect on text or nroff output. If you submit your draft to the
 RFC Editor, the keywords will be used for the search engine. -->

 <abstract>    
  <t>CoAP has been standardised as an application-level REST-based protocol.
  When multiple transport protocols exist for exchanging CoAP resource
  representations, this document introduces a way forward for CoAP endpoints as
  well as intermediaries to agree upon alternate transport and protocol
  configurations as well as URIs for CoAP messaging. 2 mechanisms are proposed: The first by extending the CoRE Resource Directory with new parameter types and the second, by introducing a new CoAP Option with which clients can interact directly with servers without needing the Resource Directory.
  </t>
 </abstract>
</front>

<middle>
 
 <section title="Introduction">

   <t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/>
   allows clients, origin servers and proxies, to exchange and manipulate
   resource representations using REST-based methods over UDP or DTLS. CoAP
   messaging is however being extended to use other alternative underlying
   transports. These include reliable transports such as TCP, WebSockets and
   TLS. In addition, the use of SMS as a CoAP transport remains a
   possibility for simple communication in cellular networks.</t>
   
   <t>When CoAP-based endpoints and proxies possess the ability to perform CoAP
   messaging over multiple transports, significant benefits can be obtained if
   communicating client endpoints can discover that multiple transport bindings
   may exist on an origin server over which CoAP resources can be retrieved.
   This allows a client to understand and possibly substitute a different
   transport protocol configuration for the same CoAP resources on the origin
   server, based on the preferences of the communicating peers. Inevitably, if
   two CoAP endpoints reside in distinctly separate networks with orthogonal
   transports, a CoAP proxy node is needed between the two networks so that CoAP
   Requests and Responses can be exchanged properly.</t>
   
   <t>A URI in CoAP, however, serves two purposes simultaneously. It firstly
   functions as a locator, by specifying the network location of the endpoint
   hosting the resource, and the underlying transport used by CoAP for accessing
   the resource representation. It secondly identifies the name of the specific
   resource found at that endpoint together with its namespace, or resource
   path. A single CoAP URI cannot be used to express the identity of the
   resource independently of alternate underlying transports or protocol
   configuration. Multiple URIs can result for a single CoAP resource
   representations if:</t>
   
   <t><list style="symbols">

    <t>the authority components of the URI differ, owing to the same physical
    host exposing several network endpoints. For example,
    "coap://example.org/sensors/temperature" and
    "coap://example.net/sensors/temperature"</t>

    <t>the scheme components of the URI differ, owing to the origin server
    exposing several underlying transport alternatives. For example,
    "coap://example.org/sensors/temperature" and
    "coap+tcp://example.org/sensors/temperature"</t>
    
    <t>the path components of the URI differ, should an origin server also allow
    alternative transport endpoint such as the WebSocket protocol, to be
    expressed using the path. For example,
    "coap://example.org/sensors/temperature" and
    "coap+ws://example.org/ws-endpoint/sensors/temperature"</t>

   </list></t>
   
   <t>Without a priori knowledge, clients would be unable to ascertain if two or
   more URIs provided by an origin server are associated to the same
   representation or not. Consequently, a communication mechanism needs to be
   conceived to allow an origin server to properly capture the relationship
   between these alternate representations or locations and then subsequently
   supply this information to clients. This also goes some way in limiting URI
   aliasing [WWWArchv1].</t>

   <t> In order to support CoAP clients, proxies and servers wishing to use CoAP
   over multiple transports, this draft proposes the following:</t>

   <t><list style="symbols">
    <t>An ability for servers to register supported CoAP transports to a CoRE
    Resource Directory <xref
     target="I-D.ietf-core-resource-directory"/> with optional registration lifetime values</t>

    <t>A means for CoAP clients to interact with a CoRE resource directory
    interface for requesting and discovering alternative transports and
    locations of CoAP resources</t>
    
    <t>New Resource Directory parameter types enabling the above-mentioned features.</t>
    
    <t>A new CoAP Option called Alternative-Transport that can be used by CoAP clients to discover and retrieve the types of alternative transports available at the origin server, as well as the links describing the transport-specific endpoint address at which CoAP resources are exposed from.
</t>

   </list></t>

 </section>

 <section title="Aim">
   <t>The following simple scenarios aim to better portray how CoAP protocol
   negotiation benefits communicating nodes</t>
   
   <section title="Overcoming Middlebox Issues">
    <t>Discovering which transports are available is important for a client to
    determine the optimal alternative to perform CoAP messaging according to its
    needs, particularly when separated from a CoAP server via a NAT. It is
    well-known that some firewalls as well as many NATs, particularly home
    gateways, hinder the proper operation of UDP traffic. NAT bindings for
    UDP-based traffic do not have as long timeouts as TCP-based traffic.</t>

        <figure align="center"
                anchor="NAT-TCP" title="CoAP Client initially accesses CoAP
                Server over UDP and then switching to TCP">
          <artwork type="drawing" align="center">
            <![CDATA[

                                           +-----------+
                                           | Resource  |
                                    +--4-->| Directory |
                                    |      +-----------+
                           +---+    |            ^
                 +----4--->|   |<---+   +---1----+
+-------------+--V--+      |   |      +-V-----------------+ 
|             |     |--2-->|   |--2-->|     |             |
|             | UDP |      | N |      | UDP |             |
|             |     |<--3--|   |<--3--|     |             |
| CoAP Client +-----+      | A |      +-----+ CoAP Server |
|             |     |--5-->|   |--5-->|     |             |
|             | TCP |      | T |      | TCP |             |
|             |     |<--6--|   |<--6--|     |             |
+-------------+-----+      +---+      +-----+-------------+

]]>
          </artwork>
        </figure>

    <t><xref target="NAT-TCP"/> depicts such a scenario. Step 1 depicts the CoAP
    Server registering its transports to a Resource Directory. A CoAP client
    uses UDP initially for accessing a CoAP Server in Step 2 and receives a
    response in Step 3. Subsequently a CoAP client, residing behind a NAT,
    performs a lookup on the Resource Directory in Step 4 to discover
    alternative transports offered by the server. Steps 5 and 6 illustrate the
    client then deciding to use TCP for CoAP messaging instead of UDP to set up
    an Observe relationship for a resource at the CoAP Server, in order to avoid
    incoming packets containing resource updates being discarded by the NAT.</t>

   </section>

   <section title="Better resource caching and serving in proxies">
    <t><xref target="proxy-caching"/> outlines a more complex example of
    intermediate nodes such as CoAP-based proxies to intelligently cache and
    respond to CoAP or HTTP clients with the same resource representation
    requested over alternative transports or server endpoints. As with the
    earlier example, the CoAP Server registers its transports to a Resource
    Directory (This is assumed to be performed beforehand and not depicted in
    the figure, for brevity)</t>

    <t>In this example, a CoAP over WebSockets client successfully obtains a
    response from a CoAP forward proxy to retrieve a resource representation
    from an origin server using UDP, by supplying the CoAP server's endpoint
    address and resource in a Proxy-URI option. Arrow 1 represents a GET request
    to "coap+ws://proxy.example.com" which subsequently retrieves the resource
    from the CoAP server using the URI "coap://example.org/sensors/temperature",
    shown as arrow 2.</t>

        <figure align="center"
                anchor="proxy-caching"
                title="Proxying and returning a resource's alternate cached
                representations to multiple clients">
          <artwork type="drawing" align="center">
            <![CDATA[

 +---------+
 | CoAP+WS |     +--------+-------+---+     +-----+---------+
 | Client  |<-1->|  Web   |       |   |<-2->|     |         |
 +---------+     | Socket | CoAP  | U |     | UDP |   CoAP  |
 +---------+     +--------+ Proxy | D |     +-----+  Server |
 |  HTTP   |<-3->|  HTTP  |       | P |     | TCP |         |
 | Client  |<-4->|        |       |   |     |     |         |
 +---------+     +--------+-------+---+     +-----+---------+

]]>
          </artwork>
        </figure>

    <t>Subsequently, assume an HTTP client requests the same resource, but
    instead specifies a CoAP over TCP alternative URI instead. Arrow 3
    represents this event, where the HTTP client performs a GET request to
    "http://proxy.example.com/coap+tcp://example.org/sensors/temperature". When
    the proxy receives the request, instead of immediately retrieving the
    temperature resource again over TCP, it first verifies either from the Resource Directory or directly from the server,
    whether the cached resource retrieved over UDP is a valid equivalent
    representation of the resource requested by the HTTP client over TCP. Upon confirmation, the proxy is able to supply the same cached
    representation to the HTTP client as well (arrow 4).</t>
   </section>

<!-- To be added once a suitable enabler is found to allow clients to ask server
   <section title="Interaction with Energy-constrained Servers">

    <t><xref target="using-sms"/> illustrates discovery and communication
    between a CoAP client and an energy-constrained CoAP Server. Such a server
    aims at conserving its energy unless a need arises otherwise. The figure
    depicts the server maintaining its communication in a low-power state by
    listening only for incoming SMS messages while disabling communication on
    radio interfaces requiring greater energy. This is depicted as the server's
    initial state in the figure, showing an active SMS endpoint and a disabled
    or dormant UDP interface.</t>

        <figure align="center"
                anchor="using-sms"
                title="CoAP client interacting over SMS to discover a server's
                IP-based endpoint">
          <artwork type="drawing" align="center">
            <![CDATA[
 REMOVED OWING TO PARSING ERROR ARISING FROM double "-" when section is commented out.
]]>
          </artwork>
        </figure>

    <t>A CoAP client wishing to perform CoAP operations can query a CoAP server
    for available transports via SMS, as shown in arrow 1. Upon reception of the
    message, should the server have its radio and IP interface up, it can send
    an SMS response containing the location of the CoAP IP endpoint and
    supported transports. Alternatively, the incoming SMS can be also used by
    the server as a triggering event to temporarily power up its radio interface
    so that UDP or other transport-based CoAP communication can instead be
    employed, and likewise provide this information in its response. This is
    depicted as arrow 2. Subsequently, low latency IP-based CoAP communication
    can occur between the endpoints as shown by arrows 3 and 4.</t>

   </section>
-->   
 </section>
 
 <section title="Node Types based on Transport Availability">
        
   <t>In <xref target="RFC7228"/>, Tables 1, 3 and 4 introduced classification
   schemes for devices, in terms of their resource constraints, energy
   limitations and communication power. For this document, in addition to these
   capabilities, it seems useful to also identify devices based on their
   transport capabilities.</t>
   
       <figure>
           <artwork><![CDATA[
 
  +-------+----------------------------+
  | Name  |  Transport Availability    |
  +-------+----------------------------+
  |  T0   |  Single transport          |
  |       |                            |
  |  T1   |  Multiple transports, with |
  |       |  one or more active at any |
  |       |  point in time             |
  |       |                            |
  |  T2   |  Multiple active and       |
  |       |  persistent transports     |
  |       |  at all times              |
  +-------+----------------------------+

 Table 1: Classes of Available Transports
 
         ]]></artwork></figure>

   <t>Type T0 nodes possess the capability of exactly 1 type of transport
   channel for CoAP, at all times. These include both active and sleepy nodes,
   which may choose to perform duty cycling for power saving.</t>

   <t>Type T1 nodes possess multiple different transports, and can retrieve or
   expose CoAP resources over any or all of these transports. However, not all
   transports are constantly active and certain transport channels and
   interfaces could be kept in a mostly-off state for energy-efficiency, such as
   when using CoAP over SMS.</t>
     
   <t>Type T2 nodes possess more than 1 transport, and multiple transports are
   simultaneously active at all times in a persistent manner. CoAP proxy nodes
   which allow CoAP endpoints from disparate transports to communicate with each
   other, are a good example of this.</t>

   </section>
<section title="New Resource Directory Parameters">
  <t>In order to allow resource interactions between clients and servers with multiple
    locations or transports, the registration, update and lookup interfaces of
    the CoRE Resource Directory need to be extended. In this section two new RD
    parameters, "at" and "tt" are introduced. Both are optional CoAP features.
    If supported, they occur at the granularity level of an origin server, ie.
    they cannot be applied selectively on some resources only. When absent, it
    is assumed that the server does not support multiple transports or
    locations.</t>
 
 <section title="The 'at' RD parameter">
  <t>A CoAP server wishing to advertise its resources over multiple transports
  does so by using a new "at" parameter to register a list of CoAP alternative
  transport URIs during registration with a Resource Directory. Such a URI would
  contain the schemes, addresses as well as any ports or paths at which the server is available.</t>
 
        <figure>
           <artwork><![CDATA[
 
   +-----------+-------+---------------+-------------------------------+
   | Name      | Query | Validity      | Description                   |
   +-----------+-------+---------------+-------------------------------+
   | CoAP      | at    |     URI       | Comma separated list of URIs  |
   | Transport |       |               | (scheme, address, port, and   |
   | URI List  |       |               | path) available at the server |
   +-----------+-------+---------------+-------------------------------+  

 Table 2: The "at" RD parameter
 
         ]]></artwork></figure>

 <t>The "at" parameter extends the Resource Directory's Registration and Update interfaces.</t>
 
  <t>The following example shows a type T1 endpoint registering its resources and advertising its ability to use TCP as an alternative transport:</t>
 
         <figure>
           <artwork><![CDATA[

   Req: POST coap:/rd.example.com/rd
    ?ep=node1&at=coap+tcp://server.example.com,coap+ws://server.example.com:5683/ws/
   Content-Format: 40
   Payload:
   </sensors/temp>;ct=41;rt="temperature-f";if="sensor",
   </sensors/door>;ct=41;rt="door";if="sensor"

   Res: 2.01 Created
   Location: /rd/4521
         ]]></artwork></figure>

 
 <t>The next example shows the same endpoint updating its registration with a new lifetime and the availability of a single alternative transport for CoAP (in this case WebSockets):</t>
 
         <figure>
           <artwork><![CDATA[

   Req: POST /rd/4521?lt=600&at=coap+ws://server.example.com:5683/ws/
   Content-Format: 40
   Payload:
   </sensors/temp>;ct=41;rt="temperature-f";if="sensor",
   </sensors/door>;ct=41;rt="door";if="sensor"

   Res: 2.04 Changed
         ]]></artwork></figure>

 </section>
 
 <section title="The 'tt' RD parameter">
  <t>A CoAP client wishing to perform a look-up on the Resource Directory for CoAP servers supporting multiple transports does so by using a new "tt" parameter to query for CoAP alternative
  transport URIs.</t>
 
        <figure>
           <artwork><![CDATA[
 
   +-----------+-------+---------------+-------------------------------+
   | Name      | Query | Validity      | Description                   |
   +-----------+-------+---------------+-------------------------------+
   | CoAP      | tt    |               | Transport type                |
   | Transport |       |               | requested by                  |
   | Type      |       |               | the client                    |
   +-----------+-------+---------------+-------------------------------+  

 Table 3: The "tt" RD parameter
 
         ]]></artwork></figure>

 <t>The "tt" parameter extends the Resource Directory's rd-lookup interface.</t>
 <t>The following example shows a client performing a lookup for endpoints supporting TCP:</t>
        <figure>
           <artwork><![CDATA[

   Req: GET /rd-lookup/ep?tt=tcp

   Res: 2.05 Content
   <coap+tcp://[FDFD::123]:61616>;ep="node5",
   <coap+tcp://[FDFD::123]:61616>;ep="node7"

         ]]></artwork></figure>

 <t>The next example shows a client performing a lookup for all transports supported by a specific endpoint:</t>
        <figure>
           <artwork><![CDATA[

   Req: GET /rd-lookup/ep?ep=node5&tt=*

   Res: 2.05 Content
   <coap+tcp://[FDFD::123]:61616>;ep="node5",
   <coap+ws://[FDFD::123]:61616>;ep="node5"

         ]]></artwork></figure>
 
 </section>
 </section>
  
 
<section title="CoAP Alternative-Transport Option">
 <t>The CoAP Alternative-Transport Option can be used by CoAP clients and CoAP servers in both Request and Response messages in constrained environments where a CoRE Resource Directory is not present. 
</t>
 <t><xref target="Option-description"/> depicts the properties of the Alternative-Transport Option.</t>
 
         <figure align="center"
                anchor="Option-description"
                title="The Alternative-Transport Option">
          <artwork type="drawing" align="center">
            <![CDATA[

 
 +-----+---+---+---+---+------------------------+--------+--------+----------+
 | No. | C | U | N | R | Name                   | Format | Length | Default  |
 +-----+---+---+---+---+------------------------+--------+--------+----------+
 |  66 |   | x | - | x | Alternative-Transport  | string | 0-1034 | (none)   |
 +-----+---+---+---+---+------------------------+--------+--------+----------+
 
    C=Critical, U=Unsafe, N=No-Cache-Key, R=Repeatable
 

]]>
          </artwork>
        </figure>

<t>When included in a Request message, this option is used by the client in 2 possible ways. In the first case, a CoAP client can include the Option with Length 0 to retrieve all alternative transports from a CoAP server. In response to the client, the server includes base URI for each transport in its own Option. In the second case, a CoAP client can include the Option with a specific value in a CoAP Request, and the CoAP server returns the base URI(s) for the specified transport. If the specified transport by a CoAP client returns multiple results on a CoAP server, the server returns all base URIs of the transport in the response, each base URI in its own Option.</t>

<t>A CoAP client can also use this Option to retrieve several transports at once by including multiple Options in the request to a CoAP server. If any of the specified transports is supported by the server, the server returns all base URIs in its own option. There can be more than 1 result for any of the transports so that each transport base URI is still included in the response in its own option.</t>

<t><xref target="Option-null"/> describes a simple interaction between a client and a server, in which the client uses an Alternative-Transports Option with a null value to discover and retrieve all the available transports from the server, as part of a GET operation to retrieve a resource representation. The server responds with a CoAP Response message which contains the resource representation as a payload. In addition, the server also supplies multiple Alternative-Transport Options in the message, with each Option containing the base URI for an available transport. In this case the base URIs returned for TCP-based and WebSocket transports indicate their availability over a non-standard port.</t>

         <figure align="center"
                anchor="Option-null"
                title="Requesting all available alternative transports on the server, and their locations">
          <artwork type="drawing" align="center">
            <![CDATA[

Client                                  Server
   +                                       |
   |  GET /temperature                     |
   |  Token: 0x64                          |
   |  Alternative-Transport: (null)        |
   +-------------------------------------->|
   |                                       |
   |    2.05 Content                       |
   |    Token: 0x64                        |
   |    Payload: 21.0 Cel                  |
   |    Alternative-Transport:             |
   |      coap+tcp://example.org:5555/     |
   |    Alternative-Transport:             |
   |      coaps+tcp://example.org:6666/    |
   |    Alternative-Transport:             |
   |      coap+sms://0015105550101/        |
   |    Alternative-Transport:             |
   |      coap+ws://example.org:8080/      |
   |                                       |
   |<--------------------------------------+
   |                                       |
 
 

]]>
          </artwork>
        </figure>

<t>Alternatively, a client can also request for the availability of a specific transport on the server, as shown in <xref target="Option-TCP"/>. Here, the CoAP Request contains an Alternative-Transport Option with the value set to request the Base URIs for TCP-based endpoints.</t>

         <figure align="center"
                anchor="Option-TCP"
                title="Requesting TCP-based alternative transports on the server, and their locations">
          <artwork type="drawing" align="center">
            <![CDATA[

Client                                  Server
   +                                       |
   |  GET /temperature                     |
   |  Token: 0x64                          |
   |  Alternative-Transport: tcp           |
   +-------------------------------------->|
   |                                       |
   |    2.05 Content                       |
   |    Token: 0x64                        |
   |    Payload: 21.0 Cel                  |
   |    Alternative-Transport:             |
   |      coap+tcp://example.org:5555/     |
   |    Alternative-Transport:             |
   |      coaps+tcp://example.org:6666/    |
   |                                       |
   |<--------------------------------------+
   |                                       |


]]>
          </artwork>
        </figure>

<t>A client may also request a subset of available transports on the server, by providing multiple Options, each having a single transport identifier. The server likewise responds to the client request by supplying the requested transport information. This is shown in <xref target="Option-WS-SMS"/>.</t>

         <figure align="center"
                anchor="Option-WS-SMS"
                title="Requesting WebSocket- and SMS-based alternative transports on the server, and their locations">
          <artwork type="drawing" align="center">
            <![CDATA[

Client                                  Server
   +                                       |
   |  GET /temperature                     |
   |  Token: 0x64                          |
   |  Alternative-Transport:  ws           |
   |  Alternative-Transport:  sms          |
   +-------------------------------------->|
   |                                       |
   |    2.05 Content                       |
   |    Token: 0x64                        |
   |    Payload: 21.0 Cel                  |
   |    Alternative-Transport:             |
   |      coap+sms://0015105550101/        |
   |    Alternative-Transport:             |
   |      coap+ws://example.org:8080/      |
   |                                       |
   |<--------------------------------------+
   |                                       |


]]>
          </artwork>
        </figure>

</section>
<section anchor="IANA" title="IANA Considerations">

   <t>This document requests the registration of new RD parameter types
   "at" and "tt".
   </t>

<t>The following entry needs to be added to the CoAP Option Numbers Registry:</t>

       <figure>
           <artwork><![CDATA[
 

   +--------+------------------------+------------------+
   | Number | Name                   | Reference        |
   +--------+------------------------+------------------+
   |     66 | Alternative-Transports | (this document)  |
   +--------+------------------------+------------------+



         ]]></artwork></figure>
 
 </section>

 <section anchor="Security" title="Security Considerations">

   <t>When multiple transports, locations and representations are used, some
   obvious risks are present both at the origin server as well as by requesting
   clients.</t>
     
<!-- To be uncommented once an on-demand mechanism is discovered.

   <t>An energy-constrained node exposing its resource representations using
   CoAP over SMS, but subsequently enabling its IP interface on-demand, can be
   subjected to denial-of-sleep as well as battery draining attacks by
   attackers. The risk can be somewhat mitigated at the server by strict
   requirements on the active lifetime of IP-based communication as well as
   restricting which clients are allowed to request for IP-based communication
   and referring other incoming requests to a caching proxy instead.</t>
-->
   <t>When a client is presented with alternate URIs for retrieving resources,
   it presents an opportunity for attackers to mount a series of attacks, either
   by hijacking communication and masquerading as an alternate location or by
   using a man-in-the-middle attack on TLS-based communication to a server and
   redirecting traffic to an alternate location. A malicious or compromised
   server could also be used for reflective denial-of-service attacks on
   innocent third parties. Moreover, clients may obtain web links to alternate
   URIs containing weaker security properties than the existing session.</t>

 </section>

 
 <section anchor="Acknowledgements" title="Acknowledgements">
   <t>Thanks to Klaus Hartke for comments and reviewing this draft, and Teemu
   Savolainen for initial discussions about protocol negotations and lifetime
   values. Zach Shelby provided significant suggestions on how the Resource
   Directory can be employed and extended in place of link attributes and
   relation types.</t>
 </section>
</middle>

 <!--  *****BACK MATTER ***** -->

<back>
 <references title="Normative References">
   &RFC7252;
   &I-D.ietf-core-resource-directory;
 </references>
 <references title="Informative References">
   
   &RFC2119;
   &RFC7228;

<!--   <reference anchor="CoREWG96">
      <front>
       <title>IETF96 CoRE minutes</title>
        <author>
         <organization>https://www.ietf.org/proceedings/96/minutes/minutes-96-core</organization>
        </author>
        <date year="2016" month="July" day="19"/>
      </front>
   </reference>
-->   
   <reference anchor="WWWArchv1">
      <front>
       <title>Architecture of the World Wide Web, Volume One</title>
        <author>
         <organization>http://www.w3.org/TR/webarch/#uri-aliases</organization>
        </author>
        <date year="2004" month="December" day="15"/>
      </front>
   </reference>
  </references>

 <section title="Change Log">
<section title="From -05 to -06">
 <t>Added support for CoAP Alternative-Transports Option</t>
</section>  
<section title="From -04 to -05">
 <t>Freshness update</t>
</section> 
<section title="From -03 to -04">
 <t>Removed previously introduced link attribute and relation types</t>
 <t>Initial foray with Resource Directory support</t>
</section> 
  <section title="From -02 to -03">
   <t>Added new author</t>
   <t>Rewrite of "Introduction" section</t>
   <t>Added new Aims Section</t>
   <t>Added new Section on Node Types</t>
   <t>Introduced "al" Active Lifetime link attribute</t>
   <t>Added new Section on Observing transports and resources</t>
   <t>Security and IANA considerations sections populated</t>
 </section>
  <section title="From -01 to -02">
   <t>Freshness update.</t>
  </section>
  <section title="From -00 to -01">
   <t>Reworked "Introduction" section, added "Rationale", and "Goals"
   sections.</t>
  </section>
 </section>
</back>
</rfc>
